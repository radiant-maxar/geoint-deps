## Macro functions.

# All versions use a YAML reference so they only have to be defined once,
# just grep for this reference and print it out.
config_reference = $(shell cat docker-compose.yml | grep '\&$(1)' | awk '{ print $$3 }' | tr -d "'")
config_release = $(call config_reference,$(1)_release)
config_version = $(call config_reference,$(1)_version)

# Where Vagrant puts the Docker container id after it's been created.
container_id = .vagrant/machines/$(1)/docker/id

# Follows the docker logs for the given container.
docker_logs = $(DOCKER) logs --follow $$(cat $(call container_id,$(1)))

# Variants for getting RPM file names.
RPMBUILD_DIST := $(call config_reference,rpmbuild_dist)
rpm_file = RPMS/$(2)/$(1)-$(call config_version,$(1))$(RPMBUILD_DIST).$(2).rpm

# Gets the RPM package name from the filename.
rpm_package = $(shell echo $(1) | awk '{ split($$0, a, "-"); l = length(a); pkg = a[1]; for (i=2; i<l-1; ++i) pkg = pkg "-" a[i]; print pkg }')


## Variables

# Default commands for Docker and Vagrant.
DOCKER ?= docker
DOCKER_VERSION := $(shell $(DOCKER) --version 2>/dev/null)
VAGRANT ?= vagrant
VAGRANT_VERSION := $(shell $(VAGRANT) --version 2>/dev/null)
POSTGRES_DOTLESS := $(shell echo $(call config_version,postgres) | tr -d '.')

# RPM files at desired versions.
GEOS_RPM := $(call rpm_file,geos,x86_64)
LIBGEOTIFF_RPM := $(call rpm_file,libgeotiff,x86_64)
OSMOSIS_RPM := $(call rpm_file,osmosis,noarch)
PROJ_RPM := $(call rpm_file,proj,x86_64)
SBT_RPM := $(call rpm_file,sbt,noarch)
SQLITE_RPM := $(call rpm_file,sqlite,x86_64)


## General targets

RPMBUILD_CONTAINERS := \
	rpmbuild \
	rpmbuild-generic \
	rpmbuild-geos \
	rpmbuild-libgeotiff \
	rpmbuild-proj \
	rpmbuild-sqlite

RPMBUILD_RPMS := \
	geos \
	libgeotiff \
	osmosis \
	proj \
	sbt \
	sqlite

.PHONY: \
	all \
	distclean \
	$(RPMBUILD_CONTAINERS) \
	$(RPMBUILD_RPMS)

all:
ifndef DOCKER_VERSION
    $(error "command docker is not available, please install Docker")
endif
ifndef VAGRANT_VERSION
    $(error "command vagrant is not available, please install Vagrant")
endif

distclean:
	$(VAGRANT) destroy -f --no-parallel || true
	rm -fr RPMS/noarch RPMS/x86_64 SOURCES/*.asc SOURCES/*.sha256 SOURCES/*.tgz SOURCES/*.tar.gz SOURCES/*.tar.xz SOURCES/*.zip


## Container targets

# Base containers
rpmbuild: .vagrant/machines/rpmbuild/docker/id

rpmbuild-generic: \
	rpmbuild \
	.vagrant/machines/rpmbuild-generic/docker/id

rpmbuild-geos: \
	rpmbuild-generic \
	.vagrant/machines/rpmbuild-geos/docker/id

rpmbuild-libgeotiff: \
	proj \
	.vagrant/machines/rpmbuild-libgeotiff/docker/id

rpmbuild-proj: \
	sqlite \
	.vagrant/machines/rpmbuild-proj/docker/id

rpmbuild-sqlite: \
	rpmbuild-generic \
	.vagrant/machines/rpmbuild-sqlite/docker/id


## RPM targets

geos: rpmbuild-geos $(GEOS_RPM)
libgeotiff: rpmbuild-libgeotiff $(LIBGEOTIFF_RPM)
osmosis: rpmbuild-generic $(OSMOSIS_RPM)
proj: rpmbuild-proj $(PROJ_RPM)
sbt: rpmbuild-generic $(SBT_RPM)
sqlite: rpmbuild-sqlite $(SQLITE_RPM)


## Build patterns

# Builds a container with Vagrant.
.vagrant/machines/%/docker/id:
	$(VAGRANT) up $*

# Runs container with Vagrant and follow logs until it completes.
RPMS/x86_64/%.rpm RPMS/noarch/%.rpm:
	$(VAGRANT) up $(call rpm_package,$*)
	$(call docker_logs,$(call rpm_package,$*))
