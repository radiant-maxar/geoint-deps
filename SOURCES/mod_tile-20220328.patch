diff --git a/includes/protocol.h b/includes/protocol.h
index 1444a80..a528d3b 100644
--- a/includes/protocol.h
+++ b/includes/protocol.h
@@ -35,6 +35,8 @@ extern "C" {
 #define TILE_PATH_MAX (256)
 #define PROTO_VER (3)
 #define RENDER_SOCKET "/run/renderd/renderd.sock"
+#define RENDER_HOST "localhost"
+#define RENDER_PORT 7654
 #define XMLCONFIG_MAX 41
 
 enum protoCmd { cmdIgnore, cmdRender, cmdDirty, cmdDone, cmdNotDone, cmdRenderPrio, cmdRenderBulk, cmdRenderLow };
diff --git a/src/daemon.c b/src/daemon.c
index 8858f3f..2b8785c 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -43,7 +43,11 @@
 #include "g_logger.h"
 
 // extern "C" {
+#ifdef __FreeBSD__
+#include <iniparser.h>
+#else
 #include <iniparser/iniparser.h>
+#endif
 // }
 
 #define PIDFILE "/run/renderd/renderd.pid"
@@ -917,7 +921,7 @@ int main(int argc, char **argv)
 			maps[iconf].max_zoom = atoi(ini_maxzoom);
 
 			if (maps[iconf].max_zoom > MAX_ZOOM) {
-				g_logger(G_LOG_LEVEL_CRITICAL, "Specified max zoom (%i) is to large. Renderd currently only supports up to zoom level %i", maps[iconf].max_zoom, MAX_ZOOM);
+				g_logger(G_LOG_LEVEL_CRITICAL, "Specified max zoom (%i) is too large. Renderd currently only supports up to zoom level %i", maps[iconf].max_zoom, MAX_ZOOM);
 				exit(7);
 			}
 
@@ -926,7 +930,7 @@ int main(int argc, char **argv)
 			maps[iconf].min_zoom = atoi(ini_minzoom);
 
 			if (maps[iconf].min_zoom < 0) {
-				g_logger(G_LOG_LEVEL_CRITICAL, "Specified min zoom (%i) is to small. Minimum zoom level has to be greater or equal to 0", maps[iconf].min_zoom);
+				g_logger(G_LOG_LEVEL_CRITICAL, "Specified min zoom (%i) is too small. Minimum zoom level has to be greater or equal to 0", maps[iconf].min_zoom);
 				exit(7);
 			}
 
diff --git a/src/gen_tile_test.cpp b/src/gen_tile_test.cpp
index 063a651..c5d4dfe 100644
--- a/src/gen_tile_test.cpp
+++ b/src/gen_tile_test.cpp
@@ -40,6 +40,10 @@
 #include <mach/clock.h>
 #include <mach/mach.h>
 #endif
+#ifdef __FreeBSD__
+#include <pthread.h>
+#include <sys/wait.h>
+#endif
 
 #include <mapnik/version.hpp>
 #if MAPNIK_VERSION < 200000
@@ -103,6 +107,8 @@ void * addition_thread(void * arg)
 	uint64_t threadid;
 #ifdef __MACH__ // Mac OS X does not support SYS_gettid
 	pthread_threadid_np(NULL, &threadid);
+#elif __FreeBSD__ // FreeBSD does not support SYS_getid either
+	threadid = (uint64_t) pthread_self();
 #else
 	threadid = syscall(SYS_gettid);
 #endif
diff --git a/src/mod_tile.c b/src/mod_tile.c
index 9273a9c..8d7d106 100644
--- a/src/mod_tile.c
+++ b/src/mod_tile.c
@@ -83,6 +83,10 @@ APLOG_USE_MODULE(tile);
 #define APACHE24 1
 #endif
 
+#if defined(__FreeBSD__) && !defined(s6_addr32)
+#define s6_addr32 __u6_addr.__u6_addr32
+#endif
+
 apr_shm_t *stats_shm;
 apr_shm_t *delaypool_shm;
 char *shmfilename;
diff --git a/src/parameterize_style.cpp b/src/parameterize_style.cpp
index b0976fa..0bb4dc7 100644
--- a/src/parameterize_style.cpp
+++ b/src/parameterize_style.cpp
@@ -92,11 +92,11 @@ static void parameterize_map_language(mapnik::Map &m, char * parameter)
 
 parameterize_function_ptr init_parameterization_function(char * function_name)
 {
-	g_logger(G_LOG_LEVEL_INFO, "Loading parameterization function for %s", function_name);
-
 	if (strcmp(function_name, "") == 0) {
+		g_logger(G_LOG_LEVEL_DEBUG, "Parameterize_style not specified (or empty string specified)");
 		return NULL;
 	} else if (strcmp(function_name, "language") == 0) {
+		g_logger(G_LOG_LEVEL_INFO, "Loading parameterization function for %s", function_name);
 		return parameterize_map_language;
 	} else {
 		g_logger(G_LOG_LEVEL_WARNING, "unknown parameterization function for %s", function_name);
diff --git a/src/render_expired.c b/src/render_expired.c
index a606229..6e9043c 100644
--- a/src/render_expired.c
+++ b/src/render_expired.c
@@ -217,14 +217,14 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_expired [OPTION] ...\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default is %d)\n", 18);
-				fprintf(stderr, "  -d, --delete-from=ZOOM  when expiring tiles of ZOOM or higher, delete them instead of re-rendering (default is off)\n");
-				fprintf(stderr, "  -T, --touch-from=ZOOM   when expiring tiles of ZOOM or higher, touch them instead of re-rendering (default is off)\n");
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default is %d)\n", 18);
+				fprintf(stderr, "  -d, --delete-from=ZOOM            when expiring tiles of ZOOM or higher, delete them instead of re-rendering (default is off)\n");
+				fprintf(stderr, "  -T, --touch-from=ZOOM             when expiring tiles of ZOOM or higher, touch them instead of re-rendering (default is off)\n");
 				fprintf(stderr, "Send a list of tiles to be rendered from STDIN in the format:\n");
 				fprintf(stderr, "  z/x/y\n");
 				fprintf(stderr, "e.g.\n");
diff --git a/src/render_list.c b/src/render_list.c
index cb75e7b..bf1ce95 100644
--- a/src/render_list.c
+++ b/src/render_list.c
@@ -197,20 +197,20 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_list [OPTION] ...\n");
-				fprintf(stderr, "  -a, --all            render all tiles in given zoom level range instead of reading from STDIN\n");
-				fprintf(stderr, "  -f, --force          render tiles even if they seem current\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -l, --max-load=LOAD  sleep if load is this high (defaults to %d)\n", MAX_LOAD_OLD);
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default is %d)\n", MAX_ZOOM);
+				fprintf(stderr, "  -a, --all                         render all tiles in given zoom level range instead of reading from STDIN\n");
+				fprintf(stderr, "  -f, --force                       render tiles even if they seem current\n");
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -l, --max-load=LOAD               sleep if load is this high (defaults to %d)\n", MAX_LOAD_OLD);
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default is %d)\n", MAX_ZOOM);
 				fprintf(stderr, "If you are using --all, you can restrict the tile range by adding these options:\n");
-				fprintf(stderr, "  -x, --min-x=X        minimum X tile coordinate\n");
-				fprintf(stderr, "  -X, --max-x=X        maximum X tile coordinate\n");
-				fprintf(stderr, "  -y, --min-y=Y        minimum Y tile coordinate\n");
-				fprintf(stderr, "  -Y, --max-y=Y        maximum Y tile coordinate\n");
+				fprintf(stderr, "  -x, --min-x=X                     minimum X tile coordinate\n");
+				fprintf(stderr, "  -X, --max-x=X                     maximum X tile coordinate\n");
+				fprintf(stderr, "  -y, --min-y=Y                     minimum Y tile coordinate\n");
+				fprintf(stderr, "  -Y, --max-y=Y                     maximum Y tile coordinate\n");
 				fprintf(stderr, "Without --all, send a list of tiles to be rendered from STDIN in the format:\n");
 				fprintf(stderr, "  X Y Z\n");
 				fprintf(stderr, "e.g.\n");
diff --git a/src/render_old.c b/src/render_old.c
index 900a5a3..cd520ea 100644
--- a/src/render_old.c
+++ b/src/render_old.c
@@ -312,15 +312,15 @@ int main(int argc, char **argv)
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_old [OPTION] ...\n");
 				fprintf(stderr, "Search the rendered tiles and re-render tiles which are older then the last planet import\n");
-				fprintf(stderr, "  -c, --config=CONFIG  specify the renderd config file\n");
-				fprintf(stderr, "  -n, --num-threads=N  the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default %d)\n", MAX_ZOOM);
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -l, --max-load=LOAD  maximum system load with which requests are submitted\n");
-				fprintf(stderr, "  -T, --timestamp=DD/MM/YY  Overwrite the assumed data of the planet import\n");
-				fprintf(stderr, "  -m, --map=STYLE      Instead of going through all styls of CONFIG, only use a specific map-style\n");
+				fprintf(stderr, "  -c, --config=CONFIG               specify the renderd config file\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default 0)\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default %d)\n", MAX_ZOOM);
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -l, --max-load=LOAD               maximum system load with which requests are submitted\n");
+				fprintf(stderr, "  -T, --timestamp=DD/MM/YY          Overwrite the assumed data of the planet import\n");
+				fprintf(stderr, "  -m, --map=STYLE                   Instead of going through all styls of CONFIG, only use a specific map-style\n");
 				return -1;
 
 			default:
diff --git a/src/render_submit_queue.c b/src/render_submit_queue.c
index 145c6a6..ff9dde5 100644
--- a/src/render_submit_queue.c
+++ b/src/render_submit_queue.c
@@ -15,15 +15,19 @@
  * along with this program; If not, see http://www.gnu.org/licenses/.
  */
 
-#include <stdio.h>
-#include <unistd.h>
-#include <stddef.h>
-#include <sys/socket.h>
-#include <sys/un.h>
+#include <arpa/inet.h>
+#include <assert.h>
+#include <errno.h>
+#include <netdb.h>
 #include <pthread.h>
+#include <stddef.h>
+#include <stdio.h>
 #include <stdlib.h>
+#include <sys/socket.h>
 #include <sys/time.h>
-#include <errno.h>
+#include <sys/types.h>
+#include <sys/un.h>
+#include <unistd.h>
 
 #include "render_submit_queue.h"
 #include "sys_utils.h"
@@ -225,22 +229,106 @@ void enqueue(const char *xmlname, int x, int y, int z)
 int make_connection(const char *spath)
 {
 	int fd;
-	struct sockaddr_un addr;
 
-	fd = socket(PF_UNIX, SOCK_STREAM, 0);
+	if (spath[0] == '/') {
+		// Create a Unix socket
+		struct sockaddr_un addr;
 
-	if (fd < 0) {
-		fprintf(stderr, "failed to create unix socket\n");
-		exit(2);
-	}
+		fd = socket(PF_UNIX, SOCK_STREAM, 0);
+
+		if (fd < 0) {
+			fprintf(stderr, "failed to create unix socket\n");
+			exit(2);
+		}
+
+		bzero(&addr, sizeof(addr));
+		addr.sun_family = AF_UNIX;
+		strncpy(addr.sun_path, spath, sizeof(addr.sun_path) - 1);
+
+		if (connect(fd, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
+			close(fd);
+			return -1;
+		}
+
+	} else {
+		// Create a network socket
+		const char *d = strchr(spath, ':');
+		char *hostname;
+		u_int16_t port = RENDER_PORT;
+		char port_s[6];
+		size_t spath_len = strlen(spath);
+		size_t hostname_len = d ? d - spath : spath_len;
+		if (!hostname_len) {
+			hostname = strdup(RENDER_HOST);
+		} else {
+			hostname = malloc(hostname_len + sizeof('\0'));
+			assert(hostname != NULL);
+			strncpy(hostname, spath, hostname_len);
+		}
+
+		if (d) {
+			port = atoi(d + 1);
+			if (!port) {
+				port = RENDER_PORT;
+			}
+		}
+		snprintf(port_s, sizeof(port_s), "%u", port);
+
+		printf("Connecting to %s, port %u/tcp\n", hostname, port);
 
-	bzero(&addr, sizeof(addr));
-	addr.sun_family = AF_UNIX;
-	strncpy(addr.sun_path, spath, sizeof(addr.sun_path) - 1);
+		struct protoent *protocol = getprotobyname("tcp");
+		if (!protocol) {
+				fprintf(stderr, "cannot find TCP protocol number\n");
+				exit(2);
+		}
+
+		struct addrinfo hints;
+		struct addrinfo *result;
+		memset(&hints, 0, sizeof(hints));
+		hints.ai_family = AF_UNSPEC;
+		hints.ai_socktype = SOCK_STREAM;
+		hints.ai_flags = 0;
+		hints.ai_protocol = protocol->p_proto;
+		hints.ai_canonname = NULL;
+		hints.ai_addr = NULL;
+		hints.ai_next = NULL;
+
+		int ai = getaddrinfo(hostname, port_s, &hints, &result);
+		if (ai != 0) {
+				fprintf(stderr, "cannot resolve hostname %s\n", hostname);
+				exit(2);
+		}
+
+		struct addrinfo *rp;
+		for (rp = result; rp != NULL; rp = rp->ai_next) {
+			fd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
+			if (fd == -1) {
+				continue;
+			}
+
+			char resolved_addr[NI_MAXHOST];
+			char resolved_port[NI_MAXSERV];
+			int name_info = getnameinfo(rp->ai_addr, rp->ai_addrlen, resolved_addr, sizeof(resolved_addr), resolved_port, sizeof(resolved_port), NI_NUMERICHOST | NI_NUMERICSERV);
+			if (name_info != 0) {
+				fprintf(stderr, "cannot retrieve name info: %d\n", name_info);
+				exit(2);
+			}
+			fprintf(stderr, "Trying %s:%s\n", resolved_addr, resolved_port);
+
+			if (connect(fd, rp->ai_addr, rp->ai_addrlen) == 0) {
+				printf("Connected to %s:%s\n", resolved_addr, resolved_port);
+				break;
+			}
+
+		}
+
+		freeaddrinfo(result);
+
+		if (rp == NULL) {
+			fprintf(stderr, "cannot connect to any address for %s\n", hostname);
+			exit(2);
+		}
 
-	if (connect(fd, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
-		close(fd);
-		return -1;
 	}
 
 	return fd;
@@ -252,7 +340,7 @@ void *thread_main(void *arg)
 	int fd = make_connection(spath);
 
 	if (fd < 0) {
-		fprintf(stderr, "socket connect failed for: %s\n", spath);
+		fprintf(stderr, "connect failed for: %s\n", spath);
 		return NULL;
 	}
 
@@ -265,14 +353,14 @@ void *thread_main(void *arg)
 		}
 
 		while (process(cmd, fd) < 1) {
-			fprintf(stderr, "connection to renderd lost");
+			fprintf(stderr, "connection to renderd lost\n");
 			close(fd);
 			fd = -1;
 
 			while (fd < 0) {
-				fprintf(stderr, "sleeping for 30 seconds");
+				fprintf(stderr, "sleeping for 30 seconds\n");
 				sleep(30);
-				fprintf(stderr, "attempting to reconnect");
+				fprintf(stderr, "attempting to reconnect\n");
 				fd = make_connection(spath);
 			}
 		}
@@ -361,4 +449,3 @@ void finish_workers(void)
 	free(workers);
 	workers = NULL;
 }
-
diff --git a/src/speedtest.cpp b/src/speedtest.cpp
index b9678a3..c48754b 100644
--- a/src/speedtest.cpp
+++ b/src/speedtest.cpp
@@ -250,9 +250,9 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: speedtest [OPTION] ...\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
 				return -1;
 
 			default:
