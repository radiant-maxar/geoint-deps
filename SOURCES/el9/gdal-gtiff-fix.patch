Backport of https://github.com/OSGeo/gdal/pull/6105

diff --git a/frmts/gtiff/geotiff.cpp b/frmts/gtiff/geotiff.cpp
index d0b431fc29..91d309afe2 100644
--- a/frmts/gtiff/geotiff.cpp
+++ b/frmts/gtiff/geotiff.cpp
@@ -4887,8 +4887,20 @@ bool GTiffDataset::ReadStrile(int nBlockId,
                               GPtrDiff_t nBlockReqSize)
 {
 #ifdef SUPPORTS_GET_OFFSET_BYTECOUNT
+    // Optimization by which we can save some libtiff buffer copy
     std::pair<vsi_l_offset, vsi_l_offset> oPair;
-    if( m_oCacheStrileToOffsetByteCount.tryGet(nBlockId, oPair) )
+    if(
+#if TIFFLIB_VERSION <= 20220520 && !defined(INTERNAL_LIBTIFF)
+        // There's a bug, up to libtiff 4.4.0, in TIFFReadFromUserBuffer()
+        // which clears the TIFF_CODERSETUP flag of tif->tif_flags, which
+        // causes the codec SetupDecode method to be called for each strile,
+        // whereas it should normally be called only for the first decoded one.
+        // For JPEG, that causes TIFFjpeg_read_header() to be called. Most
+        // of the time, that works. But for some files, at some point, the
+        // libjpeg machinery is not in the appropriate state for that.
+        m_nCompression != COMPRESSION_JPEG &&
+#endif
+        m_oCacheStrileToOffsetByteCount.tryGet(nBlockId, oPair) )
     {
         // For the mask, use the parent TIFF handle to get cached ranges
         auto th = TIFFClientdata(
@@ -4912,6 +4924,19 @@ bool GTiffDataset::ReadStrile(int nBlockId,
     else
         m_bHasUsedReadEncodedAPI = true;
 
+#if 0
+    // Can be useful to test TIFFReadFromUserBuffer() for local files
+    VSILFILE* fpTIF = VSI_TIFFGetVSILFile(TIFFClientdata( m_hTIFF ));
+    std::vector<GByte> tmp(TIFFGetStrileByteCount(m_hTIFF, nBlockId));
+    VSIFSeekL(fpTIF, TIFFGetStrileOffset(m_hTIFF, nBlockId), SEEK_SET);
+    VSIFReadL(&tmp[0], 1, TIFFGetStrileByteCount(m_hTIFF, nBlockId), fpTIF);
+    if( !TIFFReadFromUserBuffer( m_hTIFF, nBlockId,
+                                &tmp[0], tmp.size(),
+                                pOutputBuffer, nBlockReqSize ) )
+    {
+        return false;
+    }
+#else
     // Set to 1 to allow GTiffErrorHandler to implement limitation on error messages
     gnThreadLocalLibtiffError = 1;
     if( TIFFIsTiled( m_hTIFF ) )
@@ -4939,6 +4964,7 @@ bool GTiffDataset::ReadStrile(int nBlockId,
         }
     }
     gnThreadLocalLibtiffError = 0;
+#endif
     return true;
 }
 
diff --git a/frmts/gtiff/libtiff/tif_read.c b/frmts/gtiff/libtiff/tif_read.c
index 66f2e40229..cb237f6b8d 100644
--- a/frmts/gtiff/libtiff/tif_read.c
+++ b/frmts/gtiff/libtiff/tif_read.c
@@ -1493,7 +1493,8 @@ int      TIFFReadFromUserBuffer(TIFF* tif, uint32_t strile,
         TIFFReverseBits(inbuf, insize);
     }
 
-    tif->tif_flags = old_tif_flags;
+    tif->tif_flags = (old_tif_flags & (TIFF_MYBUFFER | TIFF_BUFFERMMAP)) |
+                     (tif->tif_flags & ~(TIFF_MYBUFFER | TIFF_BUFFERMMAP));
     tif->tif_rawdatasize = old_rawdatasize;
     tif->tif_rawdata = old_rawdata;
     tif->tif_rawdataoff = 0;
diff --git a/frmts/gtiff/libtiff/tiffvers.h b/frmts/gtiff/libtiff/tiffvers.h
index dbe559617d..084f335d1d 100644
--- a/frmts/gtiff/libtiff/tiffvers.h
+++ b/frmts/gtiff/libtiff/tiffvers.h
@@ -1,4 +1,4 @@
-#define TIFFLIB_VERSION_STR "LIBTIFF, Version 4.3.0\nCopyright (c) 1988-1996 Sam Leffler\nCopyright (c) 1991-1996 Silicon Graphics, Inc."
+#define TIFFLIB_VERSION_STR "LIBTIFF, Version 4.4.0\nCopyright (c) 1988-1996 Sam Leffler\nCopyright (c) 1991-1996 Silicon Graphics, Inc."
 /*
  * This define can be used in code that requires
  * compilation-related definitions specific to a
@@ -6,4 +6,4 @@
  * version checking should be done based on the
  * string returned by TIFFGetVersion.
  */
-#define TIFFLIB_VERSION 20210416
+#define TIFFLIB_VERSION 20220520
