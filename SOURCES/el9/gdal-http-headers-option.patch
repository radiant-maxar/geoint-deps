Backport of https://github.com/OSGeo/gdal/pull/6230

diff --git a/autotest/gcore/vsicurl.py b/autotest/gcore/vsicurl.py
index e6ea881e08..db0f5f7364 100755
--- a/gdalautotest-3.5.1/gcore/vsicurl.py
+++ b/gdalautotest-3.5.1/gcore/vsicurl.py
@@ -912,6 +912,41 @@ def test_vsicurl_planetary_computer_url_signing_collection():
 ###############################################################################
 
 
+def test_vsicurl_GDAL_HTTP_HEADERS():
+
+    if gdaltest.webserver_port == 0:
+        pytest.skip()
+
+    gdal.VSICurlClearCache()
+
+    handler = webserver.SequentialHandler()
+    handler.add(
+        "HEAD",
+        "/test_vsicurl_GDAL_HTTP_HEADERS.bin",
+        200,
+        {"Content-Length": "3"},
+        expected_headers={
+            "Foo": "Bar",
+            "Baz": r'escaped backslash \, escaped double-quote ", end of value',
+            "Another": "Header",
+        },
+    )
+
+    with webserver.install_http_handler(handler):
+        with gdaltest.config_option(
+            "GDAL_HTTP_HEADERS",
+            r'Foo: Bar,"Baz: escaped backslash \\, escaped double-quote \", end of value",Another: Header',
+        ):
+            statres = gdal.VSIStatL(
+                "/vsicurl/http://localhost:%d/test_vsicurl_GDAL_HTTP_HEADERS.bin"
+                % gdaltest.webserver_port
+            )
+            assert statres.size == 3
+
+
+###############################################################################
+
+
 def test_vsicurl_stop_webserver():
 
     if gdaltest.webserver_port == 0:
diff --git a/port/cpl_http.cpp b/port/cpl_http.cpp
index c0b4a440e3..947d7da0e0 100644
--- a/port/cpl_http.cpp
+++ b/port/cpl_http.cpp
@@ -976,6 +976,14 @@ int CPLHTTPPopFetchCallback(void)
  * GDAL_HTTP_HEADER_FILE, GDAL_HTTP_VERSION, GDAL_HTTP_SSL_VERIFYSTATUS,
  * GDAL_HTTP_USE_CAPI_STORE, GDAL_GSSAPI_DELEGATION
  *
+ * Starting with GDAL 3.6, the GDAL_HTTP_HEADERS configuration option can also be
+ * used to specify a comma separated list of key: value pairs. This is an
+ * alternative to the GDAL_HTTP_HEADER_FILE mechanism. If a comma or a double-quote
+ * character is needed in the value, then the key: value pair must be
+ * enclosed in double-quote characters. In that situation, backslash and double
+ * quote character must be backslash-escaped.
+ * e.g GDAL_HTTP_HEADERS=Foo: Bar,"Baz: escaped backslash \\, escaped double-quote \", end of value",Another: Header
+ *
  * @return a CPLHTTPResult* structure that must be freed by
  * CPLHTTPDestroyResult(), or NULL if libcurl support is disabled
  */
@@ -2313,6 +2321,17 @@ void *CPLHTTPSetOptions(void *pcurl, const char* pszURL,
         }
     }
 
+    const char* pszHeaders = CPLGetConfigOption("GDAL_HTTP_HEADERS", nullptr);
+    if( pszHeaders )
+    {
+         const CPLStringList aosTokens(
+             CSLTokenizeString2( pszHeaders, ",", CSLT_HONOURSTRINGS ));
+         for( int i = 0; i < aosTokens.size(); ++i )
+         {
+             headers = curl_slist_append(headers, aosTokens[i]);
+         }
+    }
+
     return headers;
 }
 
