diff --git a/scripts/osm2pgsql-replication b/scripts/osm2pgsql-replication
index 210aac84..e456a4d3 100755
--- a/scripts/osm2pgsql-replication
+++ b/scripts/osm2pgsql-replication
@@ -214,11 +214,12 @@ class Osm2pgsqlProperties:
 
 class LegacyProperties:
 
-    def __init__(self, db, prefix):
+    def __init__(self, db, prefix, osm_server):
         self.db = db
         self.prop_table = f'{prefix}_replication_status'
         self.way_table = f'{prefix}_ways'
         self.is_updatable = db.table_exists(self.way_table)
+        self.osm_server = osm_server
 
     def get_replication_base(self, server, start_at):
         """ Determine the date of the database from the newest object in the
@@ -242,7 +243,7 @@ class LegacyProperties:
 
         LOG.debug("Using way id %d for timestamp lookup", osmid)
         # Get the way from the API to find the timestamp when it was created.
-        url = 'https://www.openstreetmap.org/api/0.6/way/{}/1'.format(osmid)
+        url = '{}/api/0.6/way/{}/1'.format(self.osm_server, osmid)
         headers = {"User-Agent" : "osm2pgsql-replication",
                    "Accept" : "application/json"}
         with urlrequest.urlopen(urlrequest.Request(url, headers=headers)) as response:
@@ -594,6 +595,9 @@ def get_parser():
     group = default_args.add_argument_group('Default arguments')
     group.add_argument('-h', '--help', action='help',
                        help='Show this help message and exit')
+    group.add_argument('-O', '--osm-server', metavar='OSMURL',
+                     default='https://www.openstreetmap.org',
+                     help='Use OpenStreetMap server at the given URL (default: %(default)s)')
     group.add_argument('-q', '--quiet', action='store_const', const=0,
                        dest='verbose', default=2,
                        help='Print only error messages')
@@ -705,7 +709,7 @@ def main(prog_args=None):
         if db.table_exists(Osm2pgsqlProperties.PROP_TABLE_NAME):
             props = Osm2pgsqlProperties(db)
         else:
-            props = LegacyProperties(db, args.prefix)
+            props = LegacyProperties(db, args.prefix, args.osm_server)
 
         if not props.is_updatable:
             LOG.fatal(f'osm2pgsql middle table "{args.middle_schema}.{args.prefix}_ways" not found in database "{db.name}". '
