diff --git a/include/osmium/dynamic_handler.hpp b/include/osmium/dynamic_handler.hpp
index 73f2ac54..17e270c5 100644
--- a/include/osmium/dynamic_handler.hpp
+++ b/include/osmium/dynamic_handler.hpp
@@ -130,7 +130,11 @@ auto _name_##_dispatch(THandler& handler, const osmium::_type_& object, long) ->
                 HandlerWrapper& operator=(const HandlerWrapper&) = default;
 
                 HandlerWrapper(HandlerWrapper&&) noexcept = default;
+#ifdef OSMIUM_MOVE_EXCEPT
+                HandlerWrapper& operator=(HandlerWrapper&&) = default;
+#else
                 HandlerWrapper& operator=(HandlerWrapper&&) noexcept = default;
+#endif
 
                 ~HandlerWrapper() noexcept override = default;
 
diff --git a/include/osmium/index/detail/vector_map.hpp b/include/osmium/index/detail/vector_map.hpp
index d9ee56db..1f859f38 100644
--- a/include/osmium/index/detail/vector_map.hpp
+++ b/include/osmium/index/detail/vector_map.hpp
@@ -69,7 +69,11 @@ namespace osmium {
                 VectorBasedDenseMap& operator=(const VectorBasedDenseMap&) = default;
 
                 VectorBasedDenseMap(VectorBasedDenseMap&&) noexcept = default;
+#ifdef OSMIUM_MOVE_EXCEPT
+                VectorBasedDenseMap& operator=(VectorBasedDenseMap&&) = default;
+#else
                 VectorBasedDenseMap& operator=(VectorBasedDenseMap&&) noexcept = default;
+#endif
 
                 ~VectorBasedDenseMap() noexcept override = default;
 
@@ -191,7 +195,11 @@ namespace osmium {
                 VectorBasedSparseMap& operator=(const VectorBasedSparseMap&) = default;
 
                 VectorBasedSparseMap(VectorBasedSparseMap&&) noexcept = default;
+#ifdef OSMIUM_MOVE_EXCEPT
+                VectorBasedSparseMap& operator=(VectorBasedSparseMap&&) = default;
+#else
                 VectorBasedSparseMap& operator=(VectorBasedSparseMap&&) noexcept = default;
+#endif
 
                 ~VectorBasedSparseMap() noexcept override = default;
 
diff --git a/include/osmium/index/detail/vector_multimap.hpp b/include/osmium/index/detail/vector_multimap.hpp
index ab272618..7bf3eba3 100644
--- a/include/osmium/index/detail/vector_multimap.hpp
+++ b/include/osmium/index/detail/vector_multimap.hpp
@@ -79,7 +79,11 @@ namespace osmium {
                 VectorBasedSparseMultimap& operator=(const VectorBasedSparseMultimap&) = default;
 
                 VectorBasedSparseMultimap(VectorBasedSparseMultimap&&) noexcept = default;
+#ifdef OSMIUM_MOVE_EXCEPT
+                VectorBasedSparseMultimap& operator=(VectorBasedSparseMultimap&&) = default;
+#else
                 VectorBasedSparseMultimap& operator=(VectorBasedSparseMultimap&&) noexcept = default;
+#endif
 
                 ~VectorBasedSparseMultimap() noexcept override = default;
 
diff --git a/include/osmium/index/id_set.hpp b/include/osmium/index/id_set.hpp
index c2f44c59..152ebf2e 100644
--- a/include/osmium/index/id_set.hpp
+++ b/include/osmium/index/id_set.hpp
@@ -272,10 +272,11 @@ namespace osmium {
             }
 
             IdSetDense(IdSetDense&&) noexcept = default;
-
-            // This should really be noexcept, but GCC 4.8 doesn't like it.
-            // NOLINTNEXTLINE(hicpp-noexcept-move, performance-noexcept-move-constructor)
+#ifdef OSMIUM_MOVE_EXCEPT
             IdSetDense& operator=(IdSetDense&&) = default;
+#else
+            IdSetDense& operator=(IdSetDense&&) noexcept = default;
+#endif
 
             ~IdSetDense() noexcept override = default;
 
@@ -389,7 +390,11 @@ namespace osmium {
             IdSetSmall& operator=(const IdSetSmall&) = default;
 
             IdSetSmall(IdSetSmall&&) noexcept = default;
+#ifdef OSMIUM_MOVE_EXCEPT
+            IdSetSmall& operator=(IdSetSmall&&) = default;
+#else
             IdSetSmall& operator=(IdSetSmall&&) noexcept = default;
+#endif
 
             ~IdSetSmall() noexcept override = default;
 
diff --git a/include/osmium/util/compatibility.hpp b/include/osmium/util/compatibility.hpp
index c37ef586..67b844d1 100644
--- a/include/osmium/util/compatibility.hpp
+++ b/include/osmium/util/compatibility.hpp
@@ -33,6 +33,16 @@ DEALINGS IN THE SOFTWARE.
 
 */
 
+// Workaround for GNU where the move assignment operator declaration does not
+// match the exception-specification of the implicit declaration.
+#ifdef __GNUC__
+# if __GNUC__ <= 4
+#  if __GNUC_MINOR__ <= 8
+#   define OSMIUM_MOVE_EXCEPT
+#  endif
+# endif
+#endif
+
 // [[deprecated]] is only available in C++14, use this for the time being
 #ifdef __GNUC__
 # define OSMIUM_DEPRECATED __attribute__((deprecated))
